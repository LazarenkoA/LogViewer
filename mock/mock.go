// Code generated by MockGen. DO NOT EDIT.
// Source: models.go

// Package mock_main is a generated GoMock package.
package mock_main

import (
	reflect "reflect"

	tcell "github.com/gdamore/tcell"
	gomock "github.com/golang/mock/gomock"
	tview "github.com/rivo/tview"
)

// MockIPages is a mock of IPages interface.
type MockIPages struct {
	ctrl     *gomock.Controller
	recorder *MockIPagesMockRecorder
}

// MockIPagesMockRecorder is the mock recorder for MockIPages.
type MockIPagesMockRecorder struct {
	mock *MockIPages
}

// NewMockIPages creates a new mock instance.
func NewMockIPages(ctrl *gomock.Controller) *MockIPages {
	mock := &MockIPages{ctrl: ctrl}
	mock.recorder = &MockIPagesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPages) EXPECT() *MockIPagesMockRecorder {
	return m.recorder
}

// AddPage mocks base method.
func (m *MockIPages) AddPage(name string, item tview.Primitive, resize, visible bool) *tview.Pages {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPage", name, item, resize, visible)
	ret0, _ := ret[0].(*tview.Pages)
	return ret0
}

// AddPage indicates an expected call of AddPage.
func (mr *MockIPagesMockRecorder) AddPage(name, item, resize, visible interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPage", reflect.TypeOf((*MockIPages)(nil).AddPage), name, item, resize, visible)
}

// Blur mocks base method.
func (m *MockIPages) Blur() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Blur")
}

// Blur indicates an expected call of Blur.
func (mr *MockIPagesMockRecorder) Blur() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blur", reflect.TypeOf((*MockIPages)(nil).Blur))
}

// Draw mocks base method.
func (m *MockIPages) Draw(screen tcell.Screen) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Draw", screen)
}

// Draw indicates an expected call of Draw.
func (mr *MockIPagesMockRecorder) Draw(screen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Draw", reflect.TypeOf((*MockIPages)(nil).Draw), screen)
}

// Focus mocks base method.
func (m *MockIPages) Focus(delegate func(tview.Primitive)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Focus", delegate)
}

// Focus indicates an expected call of Focus.
func (mr *MockIPagesMockRecorder) Focus(delegate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Focus", reflect.TypeOf((*MockIPages)(nil).Focus), delegate)
}

// GetFocusable mocks base method.
func (m *MockIPages) GetFocusable() tview.Focusable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFocusable")
	ret0, _ := ret[0].(tview.Focusable)
	return ret0
}

// GetFocusable indicates an expected call of GetFocusable.
func (mr *MockIPagesMockRecorder) GetFocusable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFocusable", reflect.TypeOf((*MockIPages)(nil).GetFocusable))
}

// GetRect mocks base method.
func (m *MockIPages) GetRect() (int, int, int, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRect")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(int)
	return ret0, ret1, ret2, ret3
}

// GetRect indicates an expected call of GetRect.
func (mr *MockIPagesMockRecorder) GetRect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRect", reflect.TypeOf((*MockIPages)(nil).GetRect))
}

// InputHandler mocks base method.
func (m *MockIPages) InputHandler() func(*tcell.EventKey, func(tview.Primitive)) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InputHandler")
	ret0, _ := ret[0].(func(*tcell.EventKey, func(tview.Primitive)))
	return ret0
}

// InputHandler indicates an expected call of InputHandler.
func (mr *MockIPagesMockRecorder) InputHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputHandler", reflect.TypeOf((*MockIPages)(nil).InputHandler))
}

// MouseHandler mocks base method.
func (m *MockIPages) MouseHandler() func(tview.MouseAction, *tcell.EventMouse, func(tview.Primitive)) (bool, tview.Primitive) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MouseHandler")
	ret0, _ := ret[0].(func(tview.MouseAction, *tcell.EventMouse, func(tview.Primitive)) (bool, tview.Primitive))
	return ret0
}

// MouseHandler indicates an expected call of MouseHandler.
func (mr *MockIPagesMockRecorder) MouseHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MouseHandler", reflect.TypeOf((*MockIPages)(nil).MouseHandler))
}

// RemovePage mocks base method.
func (m *MockIPages) RemovePage(name string) *tview.Pages {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePage", name)
	ret0, _ := ret[0].(*tview.Pages)
	return ret0
}

// RemovePage indicates an expected call of RemovePage.
func (mr *MockIPagesMockRecorder) RemovePage(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePage", reflect.TypeOf((*MockIPages)(nil).RemovePage), name)
}

// SetRect mocks base method.
func (m *MockIPages) SetRect(x, y, width, height int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRect", x, y, width, height)
}

// SetRect indicates an expected call of SetRect.
func (mr *MockIPagesMockRecorder) SetRect(x, y, width, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRect", reflect.TypeOf((*MockIPages)(nil).SetRect), x, y, width, height)
}

// MockITable is a mock of ITable interface.
type MockITable struct {
	ctrl     *gomock.Controller
	recorder *MockITableMockRecorder
}

// MockITableMockRecorder is the mock recorder for MockITable.
type MockITableMockRecorder struct {
	mock *MockITable
}

// NewMockITable creates a new mock instance.
func NewMockITable(ctrl *gomock.Controller) *MockITable {
	mock := &MockITable{ctrl: ctrl}
	mock.recorder = &MockITableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITable) EXPECT() *MockITableMockRecorder {
	return m.recorder
}

// Blur mocks base method.
func (m *MockITable) Blur() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Blur")
}

// Blur indicates an expected call of Blur.
func (mr *MockITableMockRecorder) Blur() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blur", reflect.TypeOf((*MockITable)(nil).Blur))
}

// Clear mocks base method.
func (m *MockITable) Clear() *tview.Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(*tview.Table)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockITableMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockITable)(nil).Clear))
}

// Draw mocks base method.
func (m *MockITable) Draw(screen tcell.Screen) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Draw", screen)
}

// Draw indicates an expected call of Draw.
func (mr *MockITableMockRecorder) Draw(screen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Draw", reflect.TypeOf((*MockITable)(nil).Draw), screen)
}

// Focus mocks base method.
func (m *MockITable) Focus(delegate func(tview.Primitive)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Focus", delegate)
}

// Focus indicates an expected call of Focus.
func (mr *MockITableMockRecorder) Focus(delegate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Focus", reflect.TypeOf((*MockITable)(nil).Focus), delegate)
}

// GetBackgroundColor mocks base method.
func (m *MockITable) GetBackgroundColor() tcell.Color {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackgroundColor")
	ret0, _ := ret[0].(tcell.Color)
	return ret0
}

// GetBackgroundColor indicates an expected call of GetBackgroundColor.
func (mr *MockITableMockRecorder) GetBackgroundColor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackgroundColor", reflect.TypeOf((*MockITable)(nil).GetBackgroundColor))
}

// GetCell mocks base method.
func (m *MockITable) GetCell(row, column int) *tview.TableCell {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCell", row, column)
	ret0, _ := ret[0].(*tview.TableCell)
	return ret0
}

// GetCell indicates an expected call of GetCell.
func (mr *MockITableMockRecorder) GetCell(row, column interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCell", reflect.TypeOf((*MockITable)(nil).GetCell), row, column)
}

// GetColumnCount mocks base method.
func (m *MockITable) GetColumnCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColumnCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetColumnCount indicates an expected call of GetColumnCount.
func (mr *MockITableMockRecorder) GetColumnCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnCount", reflect.TypeOf((*MockITable)(nil).GetColumnCount))
}

// GetFocusable mocks base method.
func (m *MockITable) GetFocusable() tview.Focusable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFocusable")
	ret0, _ := ret[0].(tview.Focusable)
	return ret0
}

// GetFocusable indicates an expected call of GetFocusable.
func (mr *MockITableMockRecorder) GetFocusable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFocusable", reflect.TypeOf((*MockITable)(nil).GetFocusable))
}

// GetRect mocks base method.
func (m *MockITable) GetRect() (int, int, int, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRect")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(int)
	return ret0, ret1, ret2, ret3
}

// GetRect indicates an expected call of GetRect.
func (mr *MockITableMockRecorder) GetRect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRect", reflect.TypeOf((*MockITable)(nil).GetRect))
}

// GetRowCount mocks base method.
func (m *MockITable) GetRowCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRowCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetRowCount indicates an expected call of GetRowCount.
func (mr *MockITableMockRecorder) GetRowCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRowCount", reflect.TypeOf((*MockITable)(nil).GetRowCount))
}

// GetSelection mocks base method.
func (m *MockITable) GetSelection() (int, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelection")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// GetSelection indicates an expected call of GetSelection.
func (mr *MockITableMockRecorder) GetSelection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelection", reflect.TypeOf((*MockITable)(nil).GetSelection))
}

// InputHandler mocks base method.
func (m *MockITable) InputHandler() func(*tcell.EventKey, func(tview.Primitive)) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InputHandler")
	ret0, _ := ret[0].(func(*tcell.EventKey, func(tview.Primitive)))
	return ret0
}

// InputHandler indicates an expected call of InputHandler.
func (mr *MockITableMockRecorder) InputHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputHandler", reflect.TypeOf((*MockITable)(nil).InputHandler))
}

// MouseHandler mocks base method.
func (m *MockITable) MouseHandler() func(tview.MouseAction, *tcell.EventMouse, func(tview.Primitive)) (bool, tview.Primitive) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MouseHandler")
	ret0, _ := ret[0].(func(tview.MouseAction, *tcell.EventMouse, func(tview.Primitive)) (bool, tview.Primitive))
	return ret0
}

// MouseHandler indicates an expected call of MouseHandler.
func (mr *MockITableMockRecorder) MouseHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MouseHandler", reflect.TypeOf((*MockITable)(nil).MouseHandler))
}

// ScrollToBeginning mocks base method.
func (m *MockITable) ScrollToBeginning() *tview.Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScrollToBeginning")
	ret0, _ := ret[0].(*tview.Table)
	return ret0
}

// ScrollToBeginning indicates an expected call of ScrollToBeginning.
func (mr *MockITableMockRecorder) ScrollToBeginning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScrollToBeginning", reflect.TypeOf((*MockITable)(nil).ScrollToBeginning))
}

// ScrollToEnd mocks base method.
func (m *MockITable) ScrollToEnd() *tview.Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScrollToEnd")
	ret0, _ := ret[0].(*tview.Table)
	return ret0
}

// ScrollToEnd indicates an expected call of ScrollToEnd.
func (mr *MockITableMockRecorder) ScrollToEnd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScrollToEnd", reflect.TypeOf((*MockITable)(nil).ScrollToEnd))
}

// Select mocks base method.
func (m *MockITable) Select(row, column int) *tview.Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", row, column)
	ret0, _ := ret[0].(*tview.Table)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockITableMockRecorder) Select(row, column interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockITable)(nil).Select), row, column)
}

// SetCell mocks base method.
func (m *MockITable) SetCell(row, column int, cell *tview.TableCell) *tview.Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCell", row, column, cell)
	ret0, _ := ret[0].(*tview.Table)
	return ret0
}

// SetCell indicates an expected call of SetCell.
func (mr *MockITableMockRecorder) SetCell(row, column, cell interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCell", reflect.TypeOf((*MockITable)(nil).SetCell), row, column, cell)
}

// SetMouseCapture mocks base method.
func (m *MockITable) SetMouseCapture(capture func(tview.MouseAction, *tcell.EventMouse) (tview.MouseAction, *tcell.EventMouse)) *tview.Box {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMouseCapture", capture)
	ret0, _ := ret[0].(*tview.Box)
	return ret0
}

// SetMouseCapture indicates an expected call of SetMouseCapture.
func (mr *MockITableMockRecorder) SetMouseCapture(capture interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMouseCapture", reflect.TypeOf((*MockITable)(nil).SetMouseCapture), capture)
}

// SetRect mocks base method.
func (m *MockITable) SetRect(x, y, width, height int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRect", x, y, width, height)
}

// SetRect indicates an expected call of SetRect.
func (mr *MockITableMockRecorder) SetRect(x, y, width, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRect", reflect.TypeOf((*MockITable)(nil).SetRect), x, y, width, height)
}

// SetSelectable mocks base method.
func (m *MockITable) SetSelectable(rows, columns bool) *tview.Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSelectable", rows, columns)
	ret0, _ := ret[0].(*tview.Table)
	return ret0
}

// SetSelectable indicates an expected call of SetSelectable.
func (mr *MockITableMockRecorder) SetSelectable(rows, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSelectable", reflect.TypeOf((*MockITable)(nil).SetSelectable), rows, columns)
}

// SetSelectedFunc mocks base method.
func (m *MockITable) SetSelectedFunc(handler func(int, int)) *tview.Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSelectedFunc", handler)
	ret0, _ := ret[0].(*tview.Table)
	return ret0
}

// SetSelectedFunc indicates an expected call of SetSelectedFunc.
func (mr *MockITableMockRecorder) SetSelectedFunc(handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSelectedFunc", reflect.TypeOf((*MockITable)(nil).SetSelectedFunc), handler)
}
